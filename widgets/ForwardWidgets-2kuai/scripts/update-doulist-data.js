import axios from 'axios';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import * as cheerio from 'cheerio';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ÈÖçÁΩÆÂ∏∏Èáè
const CONFIG = {
    TMDB_API_KEY: process.env.TMDB_API_KEY,
    TMDB_BASE_URL: 'https://api.themoviedb.org/3/search/multi',
    OUTPUT_FILE: path.join(__dirname, '..', 'data', 'doulist-data.json'),
    
    // Ë±ÜÁì£ËØ∑Ê±ÇÈÖçÁΩÆ
    DOUBAN: {
        maxRequests: 10,
        timeWindow: 60000,
        minInterval: 1000
    },
    
    // TMDBËØ∑Ê±ÇÈó¥Èöî
    TMDB_INTERVAL: 500,
    
    // ÂàóË°®Èó¥Âª∂Ëøü
    LIST_INTERVAL: 2000
};

// Ë±ÜÁì£ÂàóË°®ÈÖçÁΩÆ
const DOUBAN_LISTS = [
    // ÁâáÂçï (Á∫ØÊï∞Â≠óID)
    { name: "È´òÂàÜÈü©Ââß", id: "2942804" },
    { name: "ÊÉäÊÇöÊÅêÊÄñÁâá", id: "526461" },
    
    // ÂêàÈõÜ (ÂåÖÂê´Â≠óÊØçÁöÑID)
    { name: "‰∏ÄÂë®ÁîµÂΩ±Âè£Á¢ëÊ¶ú", id: "movie_weekly_best" },
    { name: "ÂçéËØ≠Âè£Á¢ëÂâßÈõÜÊ¶ú", id: "tv_chinese_best_weekly" }
];

// ËØ∑Ê±ÇÁÆ°ÁêÜÂô®
class RequestManager {
    constructor(config) {
        this.config = config;
        this.requestQueue = [];
        this.lastRequestTime = 0;
    }

    async makeRequest(url, options = {}) {
        await this.waitForRateLimit();
        
        console.log(`ÂèëËµ∑ËØ∑Ê±Ç: ${this.getShortUrl(url)}`);
        return axios.get(url, {
            headers: this.getDefaultHeaders(),
            timeout: 10000,
            ...options
        });
    }

    async waitForRateLimit() {
        const now = Date.now();
        
        // Ê∏ÖÁêÜËøáÊúüËØ∑Ê±Ç
        this.requestQueue = this.requestQueue.filter(
            time => now - time < this.config.timeWindow
        );
        
        // Ê£ÄÊü•ÈÄüÁéáÈôêÂà∂
        if (this.requestQueue.length >= this.config.maxRequests) {
            const oldestRequest = this.requestQueue[0];
            const timeToWait = this.config.timeWindow - (now - oldestRequest);
            
            if (timeToWait > 0) {
                console.log(`ÈÄüÁéáÈôêÂà∂ÔºåÁ≠âÂæÖ ${Math.ceil(timeToWait / 1000)} Áßí...`);
                await this.delay(timeToWait);
                this.requestQueue = this.requestQueue.filter(
                    time => Date.now() - time < this.config.timeWindow
                );
            }
        }
        
        // Á°Æ‰øùÊúÄÂ∞èËØ∑Ê±ÇÈó¥Èöî
        const timeSinceLastRequest = now - this.lastRequestTime;
        if (timeSinceLastRequest < this.config.minInterval) {
            await this.delay(this.config.minInterval - timeSinceLastRequest);
        }
        
        this.requestQueue.push(Date.now());
        this.lastRequestTime = Date.now();
        
        console.log(`ÂΩìÂâçÁ™óÂè£ËØ∑Ê±ÇÊï∞: ${this.requestQueue.length}/${this.config.maxRequests}`);
    }

    getDefaultHeaders() {
        return {
            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1',
            'Referer': 'https://m.douban.com/'
        };
    }

    getShortUrl(url) {
        return url.length > 100 ? url.substring(0, 100) + '...' : url;
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Ë±ÜÁì£ÂàóË°®Â§ÑÁêÜÂô®
class DoubanListProcessor {
    constructor(requestManager) {
        this.requestManager = requestManager;
    }

    // Âà§Êñ≠ÂàóË°®Á±ªÂûã
    getListType(listId) {
        return /^\d+$/.test(listId) ? 'doulist' : 'subject_collection';
    }

    // Ëß£ÊûêË±ÜÁì£Ê†áÈ¢ò
    parseTitle(doubanTitle) {
        const match = doubanTitle.match(/^(.*?)(?:\((\d{4})\))?$/);
        return match ? {
            title: match[1].trim(),
            year: match[2] || null
        } : { title: doubanTitle.trim(), year: null };
    }

    // Â§ÑÁêÜÁâáÂçï
    async processDoulist(listId, listName) {
        console.log(`\nüìã Â§ÑÁêÜÁâáÂçï: ${listName}`);
        
        const items = [];
        let start = 0;
        const pageSize = 25;
        let pageCount = 0;

        while (true) {
            pageCount++;
            const pageUrl = start === 0 
                ? `https://m.douban.com/doulist/${listId}/`
                : `https://m.douban.com/doulist/${listId}/?start=${start}`;
            
            console.log(`üìÑ Ëé∑ÂèñÁ¨¨ ${pageCount} È°µ`);
            
            try {
                const response = await this.requestManager.makeRequest(pageUrl);
                const $ = cheerio.load(response.data);
                const pageItems = $('ul.doulist-items > li');
                
                if (pageItems.length === 0) break;
                
                pageItems.each((index, element) => {
                    const title = $(element).find('.info .title').text().trim();
                    const meta = $(element).find('.info .meta').text().trim();
                    const yearMatch = meta.match(/(\d{4})(?=-\d{2}-\d{2})/);
                    const year = yearMatch?.[1] || '';
                    
                    items.push({
                        title: year ? `${title}(${year})` : title,
                        rawTitle: title,
                        year: year || null
                    });
                });
                
                console.log(`‚úÖ Á¨¨ ${pageCount} È°µ: ${pageItems.length} ‰∏™È°πÁõÆ`);
                
                if (pageItems.length < pageSize) break;
                start += pageSize;
                
            } catch (error) {
                console.error(`‚ùå Á¨¨ ${pageCount} È°µÂ§±Ë¥•:`, error.message);
                break;
            }
        }
        
        console.log(`üéØ ÁâáÂçïÂÆåÊàê: ${pageCount} È°µ, ${items.length} ‰∏™È°πÁõÆ`);
        return { items, totalPages: pageCount, pageSize };
    }

    // Â§ÑÁêÜÂêàÈõÜ
    async processSubjectCollection(listId, listName) {
        console.log(`\nüé¨ Â§ÑÁêÜÂêàÈõÜ: ${listName}`);
        
        const apiUrl = `https://m.douban.com/rexxar/api/v2/subject_collection/${listId}/items?start=0&count=1000&items_only=1&for_mobile=1`;
        
        try {
            const response = await this.requestManager.makeRequest(apiUrl);
            const items = response.data?.subject_collection_items || [];
            
            const processedItems = items.map(item => ({
                title: item.year ? `${item.title}(${item.year})` : item.title,
                rawTitle: item.title || '',
                year: item.year || null,
                doubanId: item.id
            }));
            
            console.log(`‚úÖ ÂêàÈõÜÂÆåÊàê: ${processedItems.length} ‰∏™È°πÁõÆ`);
            return { items: processedItems, totalPages: 1, pageSize: 1000 };
            
        } catch (error) {
            console.error(`‚ùå ÂêàÈõÜÂ§ÑÁêÜÂ§±Ë¥•:`, error.message);
            return { items: [], totalPages: 0, pageSize: 1000 };
        }
    }

    // Áªü‰∏ÄÂ§ÑÁêÜÂàóË°®
    async processList(listConfig) {
        const { id, name } = listConfig;
        const listType = this.getListType(id);
        
        console.log(`\nüîç Ê£ÄÊµãÂàóË°®Á±ªÂûã: ${listType}`);
        
        const processor = listType === 'doulist' 
            ? this.processDoulist.bind(this, id, name)
            : this.processSubjectCollection.bind(this, id, name);
        
        return await processor();
    }
}

// TMDBÊêúÁ¥¢Âô®
class TMDBSearcher {
    constructor(apiKey, baseUrl) {
        this.apiKey = apiKey;
        this.baseUrl = baseUrl;
    }

    async search(title, year = null) {
        if (!this.apiKey) {
            console.error('‚ùå TMDB API Key Êú™ËÆæÁΩÆ');
            return null;
        }

        console.log(`üîé ÊêúÁ¥¢TMDB: ${title}${year ? ` (${year})` : ''}`);
        
        try {
            const params = {
                query: title,
                language: 'zh-CN',
                include_adult: false
            };

            const response = await axios.get(this.baseUrl, {
                params,
                headers: { Authorization: `Bearer ${this.apiKey}` },
                timeout: 10000
            });
            
            return this.processResults(response.data, title, year);
            
        } catch (error) {
            console.error(`‚ùå TMDBÊêúÁ¥¢Â§±Ë¥•:`, error.message);
            return null;
        }
    }

    processResults(data, originalTitle, year) {
        if (!data.results?.length) {
            console.log(`üì≠ Êó†TMDBÁªìÊûú: ${originalTitle}`);
            return null;
        }

        // ËøáÊª§ÁîµÂΩ±ÂíåÁîµËßÜÂâß
        const mediaResults = data.results.filter(result => 
            result.media_type === 'movie' || result.media_type === 'tv'
        );
        
        if (mediaResults.length === 0) {
            console.log(`üé¨ Êó†Â™í‰ΩìÁªìÊûú: ${originalTitle}`);
            return null;
        }

        // ÂØªÊâæÁ≤æÁ°ÆÂåπÈÖç
        const exactMatch = mediaResults.find(result => {
            const resultTitle = result.title || result.name;
            const titleMatch = resultTitle.trim().toLowerCase() === originalTitle.trim().toLowerCase();
            
            if (year) {
                const releaseDate = result.release_date || result.first_air_date;
                const resultYear = releaseDate ? new Date(releaseDate).getFullYear() : null;
                return titleMatch && resultYear === parseInt(year);
            }
            return titleMatch;
        });

        const bestMatch = exactMatch || mediaResults[0];
        const matchType = exactMatch ? 'Á≤æÁ°Æ' : 'ÊúÄ‰Ω≥';
        
        console.log(`‚úÖ ${matchType}ÂåπÈÖç: ${originalTitle} ‚Üí ${bestMatch.title || bestMatch.name}`);
        
        return this.formatResult(bestMatch);
    }

    formatResult(match) {
        return {
            id: match.id,
            type: "tmdb",
            title: match.title || match.name,
            description: match.overview,
            posterPath: match.poster_path ? `https://image.tmdb.org/t/p/w500${match.poster_path}` : null,
            backdropPath: match.backdrop_path ? `https://image.tmdb.org/t/p/w500${match.backdrop_path}` : null,
            releaseDate: match.release_date || match.first_air_date,
            rating: match.vote_average,
            mediaType: match.media_type
        };
    }
}

// ‰∏ªÂ§ÑÁêÜÂô®
class MainProcessor {
    constructor(doubanProcessor, tmdbSearcher, config) {
        this.doubanProcessor = doubanProcessor;
        this.tmdbSearcher = tmdbSearcher;
        this.config = config;
    }

    async processAllLists(lists) {
        console.log(`üöÄ ÂºÄÂßãÂ§ÑÁêÜ ${lists.length} ‰∏™ÂàóË°®`);
        
        const results = [];
        
        for (const [index, listConfig] of lists.entries()) {
            console.log(`\nüìä ËøõÂ∫¶: ${index + 1}/${lists.length}`);
            
            const result = await this.processSingleList(listConfig);
            results.push(result);
            
            // ÂàóË°®Èó¥Âª∂Ëøü
            if (index < lists.length - 1) {
                console.log(`‚è≥ Á≠âÂæÖ ${this.config.LIST_INTERVAL / 1000} Áßí...`);
                await this.delay(this.config.LIST_INTERVAL);
            }
        }
        
        return this.formatFinalResults(results, lists.length);
    }

    async processSingleList(listConfig) {
        const { id, name } = listConfig;
        
        try {
            // Ëé∑ÂèñË±ÜÁì£È°πÁõÆ
            const doubanResult = await this.doubanProcessor.processList(listConfig);
            const doubanItems = doubanResult.items;
            
            if (doubanItems.length === 0) {
                return this.createErrorResult(id, name, 'Êó†È°πÁõÆÊï∞ÊçÆ');
            }
            
            console.log(`üîÑ ÂºÄÂßãÂ§ÑÁêÜ ${doubanItems.length} ‰∏™È°πÁõÆ...`);
            
            // Â§ÑÁêÜTMDBÂåπÈÖç
            const tmdbResults = [];
            for (const [index, item] of doubanItems.entries()) {
                try {
                    const { title: cleanTitle, year } = this.doubanProcessor.parseTitle(item.title);
                    const tmdbData = await this.tmdbSearcher.search(cleanTitle, year);
                    
                    await this.delay(this.config.TMDB_INTERVAL);
                    
                    if (tmdbData) {
                        tmdbResults.push({ doubanTitle: item.title, tmdbData });
                        console.log(`‚úÖ ${index + 1}/${doubanItems.length}: ÂåπÈÖçÊàêÂäü`);
                    } else {
                        console.log(`‚ùå ${index + 1}/${doubanItems.length}: Êó†ÂåπÈÖç`);
                    }
                    
                } catch (error) {
                    console.error(`‚ö†Ô∏è È°πÁõÆ ${index + 1} Â§ÑÁêÜÂ§±Ë¥•:`, error.message);
                }
            }
            
            return this.createSuccessResult(id, name, tmdbResults, doubanResult);
            
        } catch (error) {
            console.error(`üí• ÂàóË°®Â§ÑÁêÜÂ§±Ë¥•:`, error.message);
            return this.createErrorResult(id, name, error.message);
        }
    }

    createSuccessResult(id, name, tmdbResults, doubanResult) {
        const successRate = doubanResult.items.length > 0 
            ? ((tmdbResults.length / doubanResult.items.length) * 100).toFixed(1)
            : 0;
            
        return {
            [id]: {
                name,
                shows: tmdbResults.map(r => r.tmdbData),
                totalItems: doubanResult.items.length,
                totalPages: doubanResult.totalPages,
                successfulMatches: tmdbResults.length,
                successRate: `${successRate}%`
            }
        };
    }

    createErrorResult(id, name, error) {
        return {
            [id]: {
                name,
                shows: [],
                totalItems: 0,
                totalPages: 0,
                successfulMatches: 0,
                error
            }
        };
    }

    formatFinalResults(results, totalLists) {
        const finalData = {
            last_updated: new Date(Date.now() + 8 * 3600 * 1000).toISOString().replace('Z', '+08:00'),
            total_lists: totalLists,
        };

        console.log('\nüìà ÊúÄÁªàÁªüËÆ°:');
        results.forEach(result => {
            const listId = Object.keys(result)[0];
            finalData[listId] = result[listId];
            
            const listData = result[listId];
            console.log(`- ${listId}: ${listData.successfulMatches}/${listData.totalItems} ÂåπÈÖç (${listData.successRate})`);
        });
        
        return finalData;
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// ‰∏ªÂáΩÊï∞
async function main() {
    try {
        console.log('üé¨ Ë±ÜÁì£Êï∞ÊçÆÊõ¥Êñ∞ÂºÄÂßã...');
        
        // ÂàùÂßãÂåñÁªÑ‰ª∂
        const requestManager = new RequestManager(CONFIG.DOUBAN);
        const doubanProcessor = new DoubanListProcessor(requestManager);
        const tmdbSearcher = new TMDBSearcher(CONFIG.TMDB_API_KEY, CONFIG.TMDB_BASE_URL);
        const mainProcessor = new MainProcessor(doubanProcessor, tmdbSearcher, CONFIG);
        
        // Â§ÑÁêÜÊâÄÊúâÂàóË°®
        const finalData = await mainProcessor.processAllLists(DOUBAN_LISTS);
        
        // ‰øùÂ≠òÊï∞ÊçÆ
        await fs.mkdir(path.dirname(CONFIG.OUTPUT_FILE), { recursive: true });
        await fs.writeFile(CONFIG.OUTPUT_FILE, JSON.stringify(finalData, null, 2), 'utf8');
        
        console.log(`\nüíæ Êï∞ÊçÆÂ∑≤‰øùÂ≠òËá≥: ${CONFIG.OUTPUT_FILE}`);
        console.log('üéâ Êï∞ÊçÆÊõ¥Êñ∞ÂÆåÊàê!');
        
    } catch (error) {
        console.error('üí• Á®ãÂ∫èÊâßË°åÂ§±Ë¥•:', error);
        process.exit(1);
    }
}

// ÊâßË°å
if (import.meta.url === `file://${process.argv[1]}`) {
    main().then(() => process.exit(0));
}
